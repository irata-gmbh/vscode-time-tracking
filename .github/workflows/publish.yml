name: Publish Extension

# Controls when the action will run
on:
  push:
    tags:
      - 'v*' # Run when tag matches v*, i.e. v1.0, v1.1.0, etc.
  workflow_dispatch: # Allow manual triggering

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          
      - name: Setup PNPM
        uses: pnpm/action-setup@v3
        with:
          run_install: false
          
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
          
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      - name: Install dependencies
        run: pnpm install
        
      - name: Check types
        run: pnpm run check-types
        
      - name: Lint
        run: pnpm run lint
        
      - name: Setup dependencies
        run: |
          sudo apt-get update
          # Install all dependencies including sound libraries
          sudo apt-get install -y xvfb libxkbfile-dev libsecret-1-dev libnss3 libgbm1 libgtk-3-0
          sudo apt-get install -y fonts-noto-color-emoji libcups2 libdrm2 libatspi2.0-0 libxcomposite1 libxdamage1 libxfixes3 libxrandr2
          # Find and install the appropriate sound library based on what's available
          if apt-cache search --names-only libasound2; then
            sudo apt-get install -y libasound2
          elif apt-cache search --names-only libasound2t64; then
            sudo apt-get install -y libasound2t64
          else
            echo "No appropriate sound library found, trying to continue without it"
          fi
          
      - name: Run tests
        run: |
          # Use xvfb-run to handle display setup automatically
          xvfb-run --auto-servernum --server-args="-screen 0 1024x768x24" pnpm run test
        
      - name: Package Extension
        run: |
          npx vsce package -o time-tracking-$(node -p "require('./package.json').version").vsix --no-dependencies
        
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: time-tracking-extension
          path: |
            *.vsix
            time-tracking-*.vsix
          if-no-files-found: error
      
  publish:
    needs: build
    runs-on: ubuntu-latest
    if: success() && startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          
      - name: Setup PNPM
        uses: pnpm/action-setup@v3
        with:
          run_install: false
          
      - name: Install dependencies
        run: pnpm install
        
      - name: Download Extension Artifact
        uses: actions/download-artifact@v4
        with:
          name: time-tracking-extension
        
      - name: Publish to Visual Studio Marketplace
        run: npx vsce publish -p ${{ secrets.VSCODE_MARKETPLACE_TOKEN }}
        
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: time-tracking-*.vsix
          generate_release_notes: true
          
      - name: Notify on success
        if: success()
        run: |
          echo "Extension successfully published to VS Code Marketplace and GitHub release created!"